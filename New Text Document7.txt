list:

list is an ordered sequence of items . it is one of the most used datatype in python and is very flexible.
all the items in a list don not need to be of same types.

declaring a list is pretty straight forward. items seprated by commas are enclosed within brackets[].
ex:-#empty list
a=[]

#list of integers
a=[1,2,3]

#list with mixed datatypes
a=[1,2.2,'python']

#nested list
my_list=["mouse",[5,4,6],['a']]

ex:-my list=['p','q','r','o','b']
#output: o
print(my_list[2])

#output: o
print(my_list[4])

#nested list
n_list=["happy",[2,0,1,5]]

#nested indexing
a=[5,10,15,20,25,30,40]
print("a[2]=",a[2])
print("a[0:3]=",a[0:3])
print("a[5:]=",a[5:])

ex:-
a=[1,2,3]
a[2]=4
print(a)


SETS:-

set is a unordered collection of unique items.set is defined by values seprated by comma inside braces{} and built in function set{}.iteams in a set are not ordered.

ex:-
a=[5,4,3,1,4]
print{"a=",a}

#data type of variable a 
print(type(a))

Note:-we can perform set operations like union,intersection on two sets.set have unique values .they eliminate duplicates.
ex:-
a={1,2,3}
print(a[1])

type error:'set' objects doesn't support indexing 


change an element from the set 

we cannot access or change an element of set using indexing or slicing .set doesn't support it.

we can add single element using the add() method 

 and multiple elements using the update()method

ex:-
my_set={1,3}
print(my_set)

my_set.add(2)
print(my_set)

my_set.update([2,3,4])
print(my_set)

for ex:-
my_set{1,3}
print(my_set)

my_set.update([4,5],[1,2,3,4])
print(my_set)
